version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  notify_slack_fails:
    parameters:
      on-success:
        description: Notify also on-success
        type: boolean
        default: false
    steps:
      - slack/notify:
          event: fail
          mentions: '@Mohamed Raslan'
          template: basic_fail_1
      - when:
          condition: << parameters.on-success >>
          steps:
            - slack/notify:
                event: pass
                template: basic_success_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      current_workflow_id:
        description: The id of the currently running workflow
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.current_workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.current_workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.current_workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      current_workflow_id:
        description: The id of the currently running workflow
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/VLkDX5m1CdjRzJ6samFuRw/migration_<< parameters.current_workflow_id >>)
            echo the var Success :: $SUCCESS
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            else
             echo "The revet migration didn't happen"
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_fails

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_fails

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - notify_slack_fails

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - notify_slack_fails

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_slack_fails

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - notify_slack_fails

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip python3 curl

      - run:
          name: Ensure backend infrastructure exist
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/backend.yml \
           --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople

      - run:
          name: Ensure front-end infrastructure exist
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/frontend.yml \
           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople

      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
           aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ./.circleci/ansible
          paths:
            - inventory.txt

      - destroy-environment:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - notify_slack_fails

  configure-infrastructure:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b2:a3:3f:62:e3:08:3a:e7:6a:6e:58:dd:34:86:41:9e"]
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - notify_slack_fails

  run-migrations:
    docker:
      - image: cimg/node:12.13.1
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/ansible/

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install

            touch .env
            echo ENVIROMENT=production >> ./.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env

            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: Send migration results to kvdb
          command: |
            pwd && ls -al
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/VLkDX5m1CdjRzJ6samFuRw/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - revert-migrations:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - notify_slack_fails

  deploy-frontend:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip python3 curl
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum install -y gcc-c++ make
            yum install -y nodejs

      - run:
          name: Check the node version
          command: node -v

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)

            echo API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - notify_slack_fails

  deploy-backend:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b2:a3:3f:62:e3:08:3a:e7:6a:6e:58:dd:34:86:41:9e"]
      - attach_workspace:
          at: .circleci/ansible/

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip3 install awscli

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i

            touch .env
            echo ENVIROMENT=production >> ./.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env

            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - notify_slack_fails

  smoke-test:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update nodejs npm curl
           pip3 install awscli
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values= backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"

            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi

      - destroy-environment:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - notify_slack_fails

  cloudfront-update:
    docker:
     - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip python3 curl

      - run:
          name: Save the old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            curl --insecure https://kvdb.io/VLkDX5m1CdjRzJ6samFuRw/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7} -d ${OldWorkflowID}

            echo OldWorkflowID:"${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID:"${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack  \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - run:
          name: Clear cloudfront cache
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/VLkDX5m1CdjRzJ6samFuRw/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7})
            export CloudFrontDistID=$(aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].DomainName}[?origin=='udapeople-${OldWorkflowID}.s3.amazonaws.com'].id"  --output text)
            echo CloudFrontDistID:"${CloudFrontDistID}"
            aws cloudfront create-invalidation --distribution-id ${CloudFrontDistID} --paths '/*'

      - destroy-environment:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - notify_slack_fails

  cleanup:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip python3 curl

      - run:
          name: Get old stack workflow id and remove old stacks and files
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(curl --insecure https://kvdb.io/VLkDX5m1CdjRzJ6samFuRw/OldWorkflowID_${CIRCLE_WORKFLOW_ID:0:7})
            echo OldWorkflowID:"${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            echo  s3://udapeople-${OldWorkflowID}

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo cleaning the old environment
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            else
              echo exit without cleaning
            fi

      - notify_slack_fails

workflows:
  default:
    jobs:
      - build-frontend:
          context: UdaPeopleSuperPower
      - build-backend:
          context: UdaPeopleSuperPower
      - test-frontend:
          context: UdaPeopleSuperPower
          requires: [build-frontend]
      - test-backend:
          context: UdaPeopleSuperPower
          requires: [build-backend]
      - scan-frontend:
          context: UdaPeopleSuperPower
          requires: [build-frontend]
      - scan-backend:
          context: UdaPeopleSuperPower
          requires: [build-backend]
      - deploy-infrastructure:
          context: UdaPeopleSuperPower
          requires: [test-frontend, scan-frontend, test-backend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          context: UdaPeopleSuperPower
          requires: [deploy-infrastructure]
      - run-migrations:
          context: UdaPeopleSuperPower
          requires: [configure-infrastructure]
      - deploy-frontend:
          context: UdaPeopleSuperPower
          requires: [run-migrations]
      - deploy-backend:
          context: UdaPeopleSuperPower
          requires: [run-migrations]
      - smoke-test:
          context: UdaPeopleSuperPower
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          context: UdaPeopleSuperPower
          requires: [smoke-test]
      - cleanup:
          context: UdaPeopleSuperPower
          requires: [cloudfront-update]