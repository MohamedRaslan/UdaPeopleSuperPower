version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  notify_slack_fails:
    parameters:
      on-success:
        description: Notify also on-success
        type: boolean
        default: false
    steps:
      - slack/notify:
          event: fail
          mentions: '@Mohamed Raslan'
          template: basic_fail_1
      - when:
          condition: << parameters.on-success >>
          steps:
            - slack/notify:
                event: pass
                template: basic_success_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
        current_workflow_id:
         description: The id of the currently running workflow
         type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             aws s3 rm s3://udapeople-<<parameters.current_workflow_id>> --recursive
             aws s3 rb s3://udapeople-<<parameters.current_workflow_id>>
             aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.current_workflow_id>>
             aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.current_workflow_id>>
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_fails

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_fails

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - notify_slack_fails

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - notify_slack_fails

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_slack_fails

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - notify_slack_fails

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure backend infrastructure exist
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/backend.yml \
           --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople

      - run:
          name: Ensure front-end infrastructure exist
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/frontend.yml \
           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople

      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
           aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: .
          paths:
            - circleci/ansible/inventory.txt

      -   destroy-environment:
           current_workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - notify_slack_fails


workflows:
  default:
    jobs:
      - build-frontend:
          context: UdaPeopleSuperPower
      - build-backend:
          context: UdaPeopleSuperPower
      - test-frontend:
          context: UdaPeopleSuperPower
          requires: [build-frontend]
      - test-backend:
          context: UdaPeopleSuperPower
          requires: [build-backend]
      - scan-frontend:
          context: UdaPeopleSuperPower
          requires: [build-frontend]
      - scan-backend:
          context: UdaPeopleSuperPower
          requires: [build-backend]
      - deploy-infrastructure:
          context: UdaPeopleSuperPower
          requires: [test-frontend, scan-frontend, test-backend, scan-backend]
          filters:
            branches:
              only: [master]
